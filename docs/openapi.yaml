```python
from typing import Any, Dict

from fastapi import APIRouter, HTTPException, status
from pydantic import BaseModel, Field

router = APIRouter()


class Message(BaseModel):
    """
    Represents a simple message.
    """

    detail: str = Field(..., description="The message detail.")


@router.get(
    "/openapi.yaml",
    response_model=Dict[str, Any],
    responses={
        status.HTTP_200_OK: {"description": "Successfully retrieved OpenAPI schema."},
        status.HTTP_500_INTERNAL_SERVER_ERROR: {
            "description": "Internal server error.",
            "model": Message,
        },
    },
    summary="Retrieve OpenAPI Schema",
    description="Retrieves the OpenAPI schema in YAML format.",
)
async def get_openapi_yaml() -> Dict[str, Any]:
    """
    Retrieves the OpenAPI schema.

    Returns:
        Dict[str, Any]: The OpenAPI schema as a dictionary.

    Raises:
        HTTPException: If an error occurs while retrieving the schema.
    """
    try:
        with open("docs/openapi.yaml", "r") as f:
            import yaml

            return yaml.safe_load(f)
    except FileNotFoundError:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="OpenAPI schema file not found.",
        )
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to retrieve OpenAPI schema: {e}",
        )
```